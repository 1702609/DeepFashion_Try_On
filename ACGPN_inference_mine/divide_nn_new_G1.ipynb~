{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import os\n",
    "import os.path as osp\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt\n",
    "import torchvision.transforms as transforms\n",
    "import json\n",
    "import numpy as np\n",
    "from PIL import ImageDraw\n",
    "import torch.utils.data as data\n",
    "from models import networks\n",
    "import torch.nn.functional as F\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Args:\n",
    "    name = 'label2city'\n",
    "    gpu_ids = [0, 1, 2, 3]\n",
    "    checkpoints_dir = './checkpoints'\n",
    "    model = 'pix2pixHD'\n",
    "    norm = 'instance'\n",
    "    use_dropout = True\n",
    "    verbose = True\n",
    "    batchSize = 1\n",
    "    loadSize = 512\n",
    "    fineSize = 512\n",
    "    label_nc = 20\n",
    "    input_nc = 3\n",
    "    output_nc = 3\n",
    "    dataroot = '../../pos_neg'\n",
    "    datapairs = 'test_pairs.txt'\n",
    "    resize_or_crop = 'scale_width'\n",
    "    serial_batches = True\n",
    "    no_flip = True\n",
    "    nThreads = 2\n",
    "    max_dataset_size = float(\"inf\")\n",
    "    display_winsize = 512\n",
    "    tf_log = True\n",
    "    netG = 'global'\n",
    "    ngf = 64\n",
    "    n_downsample_global = 4\n",
    "    n_blocks_global = 4\n",
    "    n_blocks_local = 3\n",
    "    n_local_enhancers = 1\n",
    "    niter_fix_global = 0\n",
    "    continue_train = True\n",
    "    display_freq = 100\n",
    "    print_freq = 100\n",
    "    save_latest_freq = 1000\n",
    "    save_epoch_freq = 10 \n",
    "    no_html = True\n",
    "    debug = True\n",
    "    load_pretrain = '../label2city'\n",
    "    which_epoch = 'latest'\n",
    "    phase = 'test'\n",
    "    niter = 100\n",
    "    niter_decay = 100\n",
    "    beta1 = 0.5\n",
    "    lr = 0.0002\n",
    "    num_D = 2\n",
    "    n_layers_D = 3\n",
    "    ndf = 64\n",
    "    lambda_feat = 10.0\n",
    "    no_ganFeat_loss = True\n",
    "    no_vgg_loss = False\n",
    "    no_lsgan = True\n",
    "    pool_size = 0\n",
    "    isTrain = True\n",
    "\n",
    "opt = Args"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_dataset(dir):\n",
    "    images = []\n",
    "    assert os.path.isdir(dir), '%s is not a valid directory' % dir\n",
    "    f = dir.split('/')[-1].split('_')[-1]\n",
    "    dirs= os.listdir(dir)\n",
    "    for img in dirs:\n",
    "        path = os.path.join(dir, img)\n",
    "        #print(path)\n",
    "        images.append(path)\n",
    "    return images\n",
    "\n",
    "def get_params(opt, size):\n",
    "    w, h = size\n",
    "    new_h = h\n",
    "    new_w = w\n",
    "    if opt.resize_or_crop == 'resize_and_crop':\n",
    "        new_h = new_w = opt.loadSize            \n",
    "    elif opt.resize_or_crop == 'scale_width_and_crop':\n",
    "        new_w = opt.loadSize\n",
    "        new_h = opt.loadSize * h // w\n",
    "\n",
    "    x = random.randint(0, np.maximum(0, new_w - opt.fineSize))\n",
    "    y = random.randint(0, np.maximum(0, new_h - opt.fineSize))\n",
    "\n",
    "def get_transform(method=Image.BICUBIC, normalize=True):\n",
    "        transform_list = []\n",
    "        transform_list += [transforms.ToTensor()]\n",
    "        if normalize:\n",
    "            transform_list += [transforms.Normalize((0.5, 0.5, 0.5),\n",
    "                                                    (0.5, 0.5, 0.5))]\n",
    "        return transforms.Compose(transform_list)\n",
    "    \n",
    "class BaseDataset(data.Dataset):\n",
    "    def __init__(self, opt):\n",
    "        self.opt = opt\n",
    "        super(BaseDataset, self).__init__()\n",
    "        \n",
    "        human_names = []\n",
    "        cloth_names = []\n",
    "        with open(os.path.join(opt.dataroot, opt.datapairs), 'r') as f:\n",
    "            for line in f.readlines():\n",
    "                h_name, c_name = line.strip().split()\n",
    "                human_names.append(h_name)\n",
    "                cloth_names.append(c_name)\n",
    "        self.human_names = human_names\n",
    "        self.cloth_names = cloth_names\n",
    "        \n",
    "    def image_for_pose(self, pose_name, transform):\n",
    "        with open(osp.join(pose_name), 'r') as f:\n",
    "            pose_label = json.load(f)\n",
    "            pose_data = pose_label['people'][0]['pose_keypoints']\n",
    "            pose_data = np.array(pose_data)\n",
    "            pose_data = pose_data.reshape((-1,3))\n",
    "        point_num = pose_data.shape[0]\n",
    "        fine_height = 256\n",
    "        fine_width = 192\n",
    "        pose_map = torch.zeros(point_num, fine_height, fine_width)\n",
    "        r = 5\n",
    "        im_pose = Image.new('L', (fine_width, fine_height))\n",
    "        pose_draw = ImageDraw.Draw(im_pose)\n",
    "        for i in range(point_num):\n",
    "            one_map = Image.new('L', (fine_width, fine_height))\n",
    "            draw = ImageDraw.Draw(one_map)\n",
    "            pointx = pose_data[i,0]\n",
    "            pointy = pose_data[i,1]\n",
    "            if pointx > 1 and pointy > 1:\n",
    "                draw.rectangle((pointx-r, pointy-r, pointx+r, pointy+r), 'white', 'white')\n",
    "                pose_draw.rectangle((pointx-r, pointy-r, pointx+r, pointy+r), 'white', 'white')\n",
    "            one_map = transform(one_map.convert('RGB'))\n",
    "            pose_map[i] = one_map[0]\n",
    "        return pose_map\n",
    "\n",
    "    def __getitem__(self, index):        \n",
    "        c_name = self.cloth_names[index]\n",
    "        h_name = self.human_names[index]\n",
    "        A_path = osp.join(self.opt.dataroot, self.opt.phase ,self.opt.phase + '_label', h_name.replace(\".jpg\", \".png\"))\n",
    "        label = Image.open(A_path).convert('L')\n",
    "\n",
    "        B_path = osp.join(self.opt.dataroot, self.opt.phase ,self.opt.phase + '_img', h_name)\n",
    "        image = Image.open(B_path).convert('RGB') \n",
    "\n",
    "        E_path = osp.join(self.opt.dataroot, self.opt.phase ,self.opt.phase + '_edge', c_name)\n",
    "        edge = Image.open(E_path).convert('L')\n",
    "                \n",
    "        C_path = osp.join(self.opt.dataroot, self.opt.phase ,self.opt.phase + '_color', c_name)\n",
    "        color = Image.open(C_path).convert('RGB')\n",
    "        \n",
    "        S_path = osp.join(self.opt.dataroot, self.opt.phase ,self.opt.phase + '_posergb', h_name)\n",
    "        skeleton = Image.open(S_path).convert('RGB')\n",
    "\n",
    "        M_path = osp.join(self.opt.dataroot, self.opt.phase ,self.opt.phase + '_imgmask', h_name.replace('.jpg', '.png'))\n",
    "        mask = Image.open(M_path).convert('L')\n",
    "        mask_array = np.array(mask)\n",
    "        parse_shape = (mask_array > 0).astype(np.float32)\n",
    "        parse_shape_ori = Image.fromarray((parse_shape * 255).astype(np.uint8))\n",
    "        parse_shape = parse_shape_ori.resize(\n",
    "            (192 // 16, 256 // 16), Image.BILINEAR)\n",
    "        mask = parse_shape.resize(\n",
    "            (192, 256), Image.BILINEAR)\n",
    "\n",
    "        transform_A = get_transform(method=Image.NEAREST, normalize=False)\n",
    "        label_tensor = transform_A(label) * 255\n",
    "        transform_B = get_transform()      \n",
    "        image_tensor = transform_B(image)\n",
    "        edge_tensor = transform_A(edge)\n",
    "        color_tensor = transform_B(color)\n",
    "        skeleton_tensor = transform_B(skeleton)\n",
    "        mask_tensor = transform_A(mask)\n",
    "        normal_tensor = transform_A(parse_shape_ori)\n",
    "        pose_name = osp.join(self.opt.dataroot, self.opt.phase ,self.opt.phase + '_pose', h_name.replace('.jpg', '_keypoints.json'))\n",
    "        pose_map = self.image_for_pose(pose_name, transform_B)\n",
    "        return {'label': label_tensor, 'image': image_tensor,\n",
    "                             'edge': edge_tensor,'color': color_tensor, \n",
    "                             'mask': mask_tensor, 'name' : c_name,\n",
    "                             'colormask': mask_tensor, 'skeleton': skeleton_tensor,\n",
    "                             'pose':pose_map,\n",
    "                             'blurry': mask_tensor, 'normal': normal_tensor}\n",
    "    def __len__(self):\n",
    "        return len(self.human_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![architecture](web_data/g1_design.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = BaseDataset(opt)\n",
    "dataloader = torch.utils.data.DataLoader(\n",
    "            t,\n",
    "            batch_size=1,\n",
    "            shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dataloader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:5: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  \"\"\"\n",
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:6: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  \n",
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:7: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  import sys\n",
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:18: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:19: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n"
     ]
    }
   ],
   "source": [
    "from torch.autograd import Variable\n",
    "\n",
    "def changearm(old_label):\n",
    "    label=old_label\n",
    "    arm1=torch.FloatTensor((label.cpu().numpy()==11).astype(np.int))\n",
    "    arm2=torch.FloatTensor((label.cpu().numpy()==13).astype(np.int))\n",
    "    noise=torch.FloatTensor((label.cpu().numpy()==7).astype(np.int))\n",
    "    label=label*(1-arm1)+arm1*4\n",
    "    label=label*(1-arm2)+arm2*4\n",
    "    label=label*(1-noise)+noise*4\n",
    "    return label\n",
    "\n",
    "position = -1 \n",
    "for data in dataloader:\n",
    "    position +=1\n",
    "    if position == 3:\n",
    "        all_clothes_label = changearm(data['label'])\n",
    "        mask_clothes = torch.FloatTensor((data['label'].cpu().numpy() == 4).astype(np.int))\n",
    "        mask_fore = torch.FloatTensor((data['label'].cpu().numpy() > 0).astype(np.int))\n",
    "        img_fore = data['image'] * mask_fore\n",
    "\n",
    "        in_label = Variable(data['label'].cuda())\n",
    "        in_edge = Variable(data['edge'].cuda())\n",
    "        in_img_fore = Variable(img_fore.cuda())\n",
    "        in_mask_clothes = Variable(mask_clothes.cuda())\n",
    "        in_color = Variable(data['color'].cuda())\n",
    "        in_all_clothes_label = Variable(all_clothes_label.cuda())\n",
    "        in_image = Variable(data['image'].cuda())\n",
    "        in_mask_fore = Variable(mask_fore.cuda()) \n",
    "        in_skeleton = Variable(data['skeleton'].cuda())\n",
    "        in_blurry = Variable(data['blurry'].cuda())\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1e6a6d75b48>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(in_image[0].permute(1,2,0).detach().cpu().numpy()+0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1e6baa23a88>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(in_color[0].permute(1,2,0).detach().cpu().numpy()+0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Architecture for G\n",
    "\n",
    "<ul>\n",
    "    <li>G1 will generate semantic labels</li>\n",
    "    <li>G3 combines everthing together to produce a final image</li>\n",
    "<ul>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "class G1(nn.Module):\n",
    "    def __init__(self, input_nc, output_nc=3):\n",
    "        super(G1, self).__init__()\n",
    "        nl = nn.InstanceNorm2d\n",
    "        self.conv1 = nn.Sequential(*[nn.Conv2d(input_nc, 64, kernel_size=3, stride=1, padding=1), nl(64), nn.ReLU()])\n",
    "        self.pool1 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "\n",
    "        self.conv2 = nn.Sequential(*[nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1), nl(128), nn.ReLU()])\n",
    "        self.pool2 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "\n",
    "        self.conv3 = nn.Sequential(*[nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1), nl(256), nn.ReLU()])\n",
    "        self.pool3 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "\n",
    "        self.conv4 = nn.Sequential(*[nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU(),\n",
    "                                     nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU()])\n",
    "        self.drop4 = nn.Dropout(0.5)\n",
    "        self.pool4 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "\n",
    "        self.conv5 = nn.Sequential(*[nn.Conv2d(512, 1024, kernel_size=3, stride=1, padding=1), nl(1024), nn.ReLU(),\n",
    "                                     nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1), nl(1024), nn.ReLU()])\n",
    "        self.drop5 = nn.Dropout(0.5)\n",
    "\n",
    "        self.up6 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1), nl(512),\n",
    "              nn.ReLU()])\n",
    "\n",
    "        self.conv6 = nn.Sequential(*[nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU(),\n",
    "                                     nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU()])\n",
    "        self.up7 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(512, 256, kernel_size=3, stride=1, padding=1), nl(256),\n",
    "              nn.ReLU()])\n",
    "        self.conv7 = nn.Sequential(*[nn.Conv2d(512, 256, kernel_size=3, stride=1, padding=1), nl(256), nn.ReLU()])\n",
    "\n",
    "        self.up8 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(256, 128, kernel_size=3, stride=1, padding=1), nl(128),\n",
    "              nn.ReLU()])\n",
    "\n",
    "        self.drop6 = nn.Dropout(0.45)\n",
    "\n",
    "        self.conv8 = nn.Sequential(*[nn.Conv2d(256, 128, kernel_size=3, stride=1, padding=1), nl(128), nn.ReLU()])\n",
    "\n",
    "        self.up9 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(128, 64, kernel_size=3, stride=1, padding=1), nl(64),\n",
    "              nn.ReLU()])\n",
    "\n",
    "        self.drop7 = nn.Dropout(0.45)\n",
    "\n",
    "        self.conv9 = nn.Sequential(*[nn.Conv2d(128, 64, kernel_size=3, stride=1, padding=1), nl(64), nn.ReLU(),\n",
    "                                     nn.Conv2d(\n",
    "                                         64, output_nc, kernel_size=3, stride=1, padding=1)\n",
    "                                     ])\n",
    "\n",
    "    def forward(self, input):\n",
    "        conv1 = self.conv1(input)\n",
    "        pool1 = self.pool1(conv1)\n",
    "\n",
    "        conv2 = self.conv2(pool1)\n",
    "        pool2 = self.pool2(conv2)\n",
    "\n",
    "        conv3 = self.conv3(pool2)\n",
    "        pool3 = self.pool3(conv3)\n",
    "\n",
    "        conv4 = self.conv4(pool3)\n",
    "        drop4 = self.drop4(conv4)\n",
    "        pool4 = self.pool4(drop4)\n",
    "\n",
    "        conv5 = self.conv5(pool4)\n",
    "        drop5 = self.drop5(conv5)\n",
    "\n",
    "        up6 = self.up6(drop5)\n",
    "        conv6 = self.conv6(torch.cat([drop4, up6], 1))\n",
    "\n",
    "        up7 = self.up7(conv6)\n",
    "        conv7 = self.conv7(torch.cat([conv3, up7], 1))\n",
    "\n",
    "        up8 = self.up8(conv7)\n",
    "\n",
    "        conv8 = self.drop6(self.conv8(torch.cat([conv2, up8], 1)))\n",
    "\n",
    "        up9 = self.up9(conv8)\n",
    "        conv9 = self.drop7(self.conv9(torch.cat([conv1, up9], 1)))\n",
    "        return conv9\n",
    "\n",
    "\n",
    "class Refine(nn.Module):\n",
    "    def __init__(self, input_nc, output_nc=3):\n",
    "        super(Refine, self).__init__()\n",
    "        nl = nn.InstanceNorm2d\n",
    "        self.conv1 = nn.Sequential(*[nn.Conv2d(input_nc, 64, kernel_size=3, stride=1, padding=1), nl(64), nn.ReLU(),\n",
    "                                     nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1), nl(64), nn.ReLU()])\n",
    "        self.pool1 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "        self.conv2 = nn.Sequential(*[nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1), nl(128), nn.ReLU(),\n",
    "                                     nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1), nl(128), nn.ReLU()])\n",
    "        self.pool2 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "        self.conv3 = nn.Sequential(*[nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1), nl(256), nn.ReLU(),\n",
    "                                     nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1), nl(256), nn.ReLU()])\n",
    "        self.pool3 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "        self.conv4 = nn.Sequential(*[nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU(),\n",
    "                                     nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU()])\n",
    "        self.drop4 = nn.Dropout(0.5)\n",
    "        self.pool4 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "        self.conv5 = nn.Sequential(*[nn.Conv2d(512, 1024, kernel_size=3, stride=1, padding=1), nl(1024), nn.ReLU(),\n",
    "                                     nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1), nl(1024), nn.ReLU()])\n",
    "        self.drop5 = nn.Dropout(0.5)\n",
    "        self.up6 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1), nl(512),\n",
    "              nn.ReLU()])\n",
    "        self.conv6 = nn.Sequential(*[nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU(),\n",
    "                                     nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU()])\n",
    "        self.up7 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(512, 256, kernel_size=3, stride=1, padding=1), nl(256),\n",
    "              nn.ReLU()])\n",
    "        self.conv7 = nn.Sequential(*[nn.Conv2d(512, 256, kernel_size=3, stride=1, padding=1), nl(256), nn.ReLU(),\n",
    "                                     nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1), nl(256), nn.ReLU()])\n",
    "        self.up8 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(256, 128, kernel_size=3, stride=1, padding=1), nl(128),\n",
    "              nn.ReLU()])\n",
    "        self.conv8 = nn.Sequential(*[nn.Conv2d(256, 128, kernel_size=3, stride=1, padding=1), nl(128), nn.ReLU(),\n",
    "                                     nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1), nl(128), nn.ReLU()])\n",
    "        self.up9 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(128, 64, kernel_size=3, stride=1, padding=1), nl(64),\n",
    "              nn.ReLU()])\n",
    "        self.conv9 = nn.Sequential(*[nn.Conv2d(128, 64, kernel_size=3, stride=1, padding=1), nl(64), nn.ReLU(),\n",
    "                                     nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1), nl(\n",
    "                                         64), nn.ReLU(),\n",
    "                                     nn.Conv2d(\n",
    "                                         64, output_nc, kernel_size=3, stride=1, padding=1)\n",
    "                                     ])\n",
    "    def forward(self, input):\n",
    "        conv1 = self.conv1(input)\n",
    "        pool1 = self.pool1(conv1)\n",
    "        conv2 = self.conv2(pool1)\n",
    "        pool2 = self.pool2(conv2)\n",
    "        conv3 = self.conv3(pool2)\n",
    "        pool3 = self.pool3(conv3)\n",
    "        conv4 = self.conv4(pool3)\n",
    "        drop4 = self.drop4(conv4)\n",
    "        pool4 = self.pool4(drop4)\n",
    "        conv5 = self.conv5(pool4)\n",
    "        drop5 = self.drop5(conv5)\n",
    "        up6 = self.up6(drop5)\n",
    "        conv6 = self.conv6(torch.cat([drop4, up6], 1))\n",
    "        up7 = self.up7(conv6)\n",
    "        conv7 = self.conv7(torch.cat([conv3, up7], 1))\n",
    "        up8 = self.up8(conv7)\n",
    "        conv8 = self.conv8(torch.cat([conv2, up8], 1))\n",
    "        up9 = self.up9(conv8)\n",
    "        conv9 = self.conv9(torch.cat([conv1, up9], 1))\n",
    "        return conv9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "with torch.no_grad():\n",
    "    G1n = G1(7, 4)\n",
    "    G1n.cuda(opt.gpu_ids[0])\n",
    "    G1n.load_state_dict(torch.load('../label2city/mine/G1_blurry_mask_20_.pth'))\n",
    "    G1n.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:27: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "\n",
    "def gen_noise(shape):\n",
    "    noise = np.zeros(shape, dtype=np.uint8)\n",
    "    ### noise\n",
    "    noise = cv2.randn(noise, 0, 255)\n",
    "    noise = np.asarray(noise / 255, dtype=np.uint8)\n",
    "    noise = torch.tensor(noise, dtype=torch.float32)\n",
    "    return noise.cuda()\n",
    "\n",
    "def encode_input(label_map, clothes_mask,all_clothes_label):\n",
    "    size = label_map.size()\n",
    "    oneHot_size = (size[0], 14, size[2], size[3])\n",
    "    input_label = torch.cuda.FloatTensor(torch.Size(oneHot_size)).zero_()\n",
    "    input_label = input_label.scatter_(1, label_map.data.long().cuda(), 1.0)\n",
    "\n",
    "    masked_label= torch.cuda.FloatTensor(torch.Size(oneHot_size)).zero_()\n",
    "    masked_label=masked_label.scatter_(1,(label_map*(1-clothes_mask)).data.long().cuda(), 1.0)\n",
    "\n",
    "    c_label=torch.cuda.FloatTensor(torch.Size(oneHot_size)).zero_()\n",
    "    c_label=c_label.scatter_(1,all_clothes_label.data.long().cuda(),1.0)\n",
    "\n",
    "    input_label = Variable(input_label)\n",
    "\n",
    "    return input_label,masked_label,c_label\n",
    "\n",
    "pre_clothes_mask = torch.FloatTensor((in_edge.detach().cpu().numpy() > 0.5).astype(np.float)).cuda()\n",
    "shape = pre_clothes_mask.shape\n",
    "clothes = in_color*pre_clothes_mask\n",
    "input_label,masked_label,all_clothes_label = encode_input(in_label,in_mask_clothes,in_all_clothes_label)\n",
    "shape = pre_clothes_mask.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### This is the training label "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x1440 with 14 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 14\n",
    "fig = plt.figure(figsize=(8, 20))\n",
    "\n",
    "for i in range(14):\n",
    "    ax = fig.add_subplot(5, 3, i+1)\n",
    "    plt.imshow(masked_label[0][i].detach().cpu().numpy(), cmap = 'gray')\n",
    "    ax.xaxis.set_visible(False)\n",
    "    ax.yaxis.set_visible(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "sigmoid = nn.Sigmoid()\n",
    "G1_in = torch.cat([in_blurry, clothes, in_skeleton], dim=1)\n",
    "arm_label = G1n(G1_in)\n",
    "arm_label = sigmoid(arm_label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([1, 4, 256, 192])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arm_label.size()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### This is the label when mixing up the clothing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_discrete_label(inputs, label_nc, onehot=True):\n",
    "    pred_batch = []\n",
    "    size = inputs.size()\n",
    "    for input in inputs:\n",
    "        input = input.view(1, label_nc, size[2], size[3])\n",
    "        pred = np.squeeze(input.data.max(1)[1].cpu().numpy(), axis=0)\n",
    "        pred_batch.append(pred)\n",
    "    pred_batch = np.array(pred_batch)\n",
    "    pred_batch = torch.from_numpy(pred_batch)\n",
    "    label_map = []\n",
    "    for p in pred_batch:\n",
    "        p = p.view(1, 256, 192)\n",
    "        label_map.append(p)\n",
    "    label_map = torch.stack(label_map, 0)\n",
    "    if not onehot:\n",
    "        return label_map.float().cuda()\n",
    "    size = label_map.size()\n",
    "    oneHot_size = (size[0], label_nc, size[2], size[3])\n",
    "    input_label = torch.cuda.FloatTensor(torch.Size(oneHot_size)).zero_()\n",
    "    input_label = input_label.scatter_(1, label_map.data.long().cuda(), 1.0)\n",
    "    return input_label\n",
    "\n",
    "\n",
    "armlabel_map = generate_discrete_label(arm_label.detach(), 4, False)\n",
    "dis_label = generate_discrete_label(arm_label.detach(), 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x1440 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(8, 20))\n",
    "\n",
    "for i in range(4):\n",
    "    ax = fig.add_subplot(5, 3, i+1)\n",
    "    plt.imshow(dis_label[0][i].detach().cpu().numpy(),cmap='gray')\n",
    "    ax.xaxis.set_visible(False)\n",
    "    ax.yaxis.set_visible(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1e6bab28188>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(armlabel_map[0].permute(1,2,0).detach().cpu().numpy(), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import fix_segmentation_spot as spot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Check for segmentation defects "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "for image_index in range(dis_label.shape[0]): #check every segmentation in the batch\n",
    "    hole_hand = dis_label[image_index].detach().cpu().numpy()\n",
    "    armlabel_map_needs_updating = False\n",
    "    if (spot.checkForSpots(hole_hand[3])): # left arm\n",
    "        armlabel_map_needs_updating = True\n",
    "        fixed_segment = spot.fixSpots(hole_hand, 3)\n",
    "        hole_hand[1] = fixed_segment[1] # torso needs to be updated before checking for the other hand\n",
    "        fixed_segment = torch.from_numpy(fixed_segment).to('cuda')\n",
    "        dis_label[image_index][1] = fixed_segment[1]\n",
    "        dis_label[image_index][3] = fixed_segment[3]\n",
    "    if (spot.checkForSpots(hole_hand[2])): # right arm\n",
    "        armlabel_map_needs_updating = True\n",
    "        fixed_segment = spot.fixSpots(hole_hand, 2)\n",
    "        fixed_segment = torch.from_numpy(fixed_segment).to('cuda')\n",
    "        dis_label[image_index][1] = fixed_segment[1]\n",
    "        dis_label[image_index][3] = fixed_segment[3]\n",
    "    if armlabel_map_needs_updating == True:\n",
    "        armlabel_map = generate_discrete_label(dis_label.detach(), 4, False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1e6dd331308>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMsAAAD8CAYAAADZhFAmAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAUS0lEQVR4nO3da2xU95nH8e9jG1+wwQETiMFmMZFzIVGDAdGUoJAtSpOgtqRqlASpNImiJaqS3dBkXyS9qHkTpbvadpVqdyORFBVW3VyktgovEuVWqihKKM2FWxJRINwMBoKhBHCNLzz7Yo7JYHs8f3tmfM7A7yONZuZ/zpzzYOY35/Y/55i7IyLZlcRdgEixUFhEAiksIoEUFpFACotIIIVFJFDBwmJmt5rZdjPbaWaPFWo+IqPFCnGcxcxKgb8CNwOtwF+AZe7+Sd5nJjJKCrVkmQ/sdPfP3L0LeAFYWqB5iYyKsgJNdxqwP+19K/DVTCObmboRSGK4uw3WXqiwZGVmK4AVcc1fZLgKFZYDQGPa+4ao7Rx3XwWsAi1ZpDgUapvlL0CzmTWZWTlwN7CuQPMSGRUFWbK4e4+ZPQS8BpQCq93940LMS2S0FGTX8bCL0GqYJEimDXwdwRcJpLCIBFJYRAIpLCKBFBaRQAqLSCCFRSSQwiISSGERCaSwiARSWEQCKSwigRQWkUAKi0gghUUkkMIiEkhhEQmksIgEUlhEAiksIoEUFpFACotIIIVFJJDCIhJIYREJpLCIBFJYRAIpLCKBFBaRQAqLSCCFRSSQwiISSGERCaSwiATK6Z6SZrYHOAn0Aj3uPs/MJgIvAjOAPcCd7n48tzJF4pePJcs/uvtsd58XvX8MeMvdm4G3ovciRa8Qq2FLgTXR6zXA7QWYh8ioyzUsDrxuZh+Y2YqobYq7t0WvDwFTBvugma0ws/fN7P0caxAZFTnd2tvMprn7ATObDLwB/DOwzt0vSRvnuLtPyDId3dpbEqMgt/Z29wPR8xHgD8B84LCZ1QNEz0dymYdIUow4LGZWbWbj+l4D3wC2AeuAe6LR7gFezrVIkSQY8WqYmc0ktTSB1C7o/3P3J82sDngJmA7sJbXr+FiWaWk1TBIj02pYTtss+aKwSJIUZJtF5GKisIgEUlhEAiksIoEUFpFACotIIIVFJJDCIhJIYREJpLCIBFJYRAIpLCKBFBaRQAqLSCCFRSSQwiISKKeL7MlADQ0NVFRUnNd2+PBhTp06FVNFhVdRUUFDQ8N5bb29vezZsyeeggpEYcmD8ePH09zcDMC0adMGDcvp06f56KOPOHv2bBwlFkxpaSlz585l2rRp57X39PRQV1d37v327duL/gdDYcmBmXHTTTdRXl7O+PHjM443ZUrq0mnjxo3jT3/60yhVNzpKSkoGBAWgrKyMmTNnnntfV1dHd3c369evH83y8krn4I+QmXHLLbcwbty4YX3u6NGjRf2F6a+iooJvf/vbweOfOXOG9vZ23n33XZLw3RuMzsHPo/LychYvXjzsoPR99kKyZMmSYY1fUVHB1KlTmTt3LtXV1ZSUFM9XsHgqTYixY8cyf/58JkwY8iKbF42RftmbmppYsmQJM2fOxGzQH/LEUViGaerUqdTX14/48+Xl5UydOjWPFRW3lpYWxowZE3cZQRSWYRg3bhwzZszIaRqVlZVMnz49PwXFbPbs2XlZKsyZMycP1RSewjIMlZWVeVn9uuyyy87bU1Ss6uvr8xKWxsZGFi5cmIeKCkthCVRZWZm3/9AxY8bQ0tIy4EBesTAzFixYQHV1dd6mWVtbm/iN/WRXlyBmRllZ/g5LlZSU8LWvfS2n7Z84jBkz5txByHxumI8dO5YFCxbkbXqFoLDEbOHChUyfPv3cgcukMjMaGhq45ppraGpqKsg8qqqqqK2tLci080EHJQNdd911XHHFFQWbfmdnJ5999hkAe/fuTVzXkGuvvZarr7664PPZvn07W7ZsKfh8hpLpoKS6uwQws3N9vwqlsrKSWbNmATB58mS6urrOG757924OHjxY0BoGc9VVV1FXV1d0q4uFoLAk0KRJkwa01dXVDQhQuvXr13PmzJm8zL+mpubczoyqqqq8bqsVM/0VikRFRcWA3szpvvnNb57Xo3nLli3s27dv0HFvvPHGITt+lpSUxLZn6oorruD48ePs378/lvkPRWG5QPT/gs+ZM6doDvalM7PEdn/J+vNhZqvN7IiZbUtrm2hmb5jZjuh5QtRuZvYrM9tpZlvMrPj+twZRrMdDJL9ClrW/AW7t1/YY8Ja7NwNvRe8BbgOao8cK4Jn8lBmv6667LrG/djJ6sobF3d8G+t9AdSmwJnq9Brg9rX2tp2wALum7zbdIsRvpVtwUd2+LXh8C+o6oTQPSt8xao7aipqXK6GppaUnkwcmcN/Dd3UdyUNHMVpBaVUu0RYsWUVlZGXcZF5Xy8vJE9hMbaUWH+1avoucjUfsBoDFtvIaobQB3X+Xu89x93ghrGBVaqkifkYZlHXBP9Poe4OW09u9He8WuB06kra6JFLWsq2Fm9jxwEzDJzFqBnwE/B14ys/uBvcCd0eivAEuAnUAHcF8BahaJRdawuPuyDIMWDzKuAw/mWpRIEiVvK0okoRQWkUAKi0gghUUkkMIiEkhhEQmksIgEUlhEAiksIoEUFpFACotIIIVFJJDCIhJIYREJpLCIBFJYRAIpLCKBFBaRQAqLSCCFRSSQwiISSGERCaSwiARSWEQCKSwigRQWSaS6urrEXZRdYZFEamlpSdxdkhUWkUAKiyTSe++9R3d3d9xlnEdhkUQ6ffp03CUMoLAMoaqqKnHrzRIfhWUIV155JRMmTIi7DEkIhUUkkMIiEihrWMxstZkdMbNtaW1PmNkBM9sUPZakDXvczHaa2XYzu6VQhYuMtpAly2+AWwdp/093nx09XgEws1nA3cA10Wf+x8xK81WsSJyyhsXd3waOBU5vKfCCu59x992k7lo8P4f6RBIjl22Wh8xsS7Sa1rfLaBqwP22c1qhtADNbYWbvm9n7OdQgMmpGGpZngMuB2UAb8IvhTsDdV7n7PHefN8IaREbViMLi7ofdvdfdzwLP8uWq1gGgMW3UhqhNpOiNKCxmVp/29jtA356ydcDdZlZhZk1AM7AxtxLjMX36dJqamuIuQxIka18OM3seuAmYZGatwM+Am8xsNuDAHuABAHf/2MxeAj4BeoAH3b23IJUXWFlZmbq6yHmyfhvcfdkgzb8eYvwngSdzKUokiXQEXySQwiISSGERCaSwSCItWrSIMWPGxF3GeRQWSaSkBQUUFpFgCssgqqqqqK+vzz6iXFQUlkGMHTuWqVOnxl2GJIzCIhJIYRlEe3s7H330UdxlSMIoLBmcPXs27hIkYRQWkUAKi0gghUUkkMIiEkhhEQmksIgEUlhEAiksIoEUFpFACosk0ttvv63b5ImE6OrqiruEARSWDDo6Oujo6Ii7DEkQhSWDQ4cOceCArjwrX1JY8mjXrl2cOnUq7jKkQBSWPNm7dy9bt27lnXfeSdyGqeSHLuabB+5OR0cH3d3ddHd309PTk8irk0hutGTJg0OHDrFt27lbbvLKK6/EWI0UisIiEkhhyVF3dzf79u2LuwwZBQpLjs6cOaOwXCQUFpFACksBnD17ltdeey3uMiTPsobFzBrNbL2ZfWJmH5vZw1H7RDN7w8x2RM8TonYzs1+Z2c7o1t9zCv2PSCJdSunCE7Jk6QEedfdZwPXAg2Y2C3gMeMvdm4G3ovcAt5G68WozsILUbcBFil7WsLh7m7t/GL0+CXwKTAOWAmui0dYAt0evlwJrPWUDcEm/uxuLDGnfvn2J7MQ6rG0WM5sBtAB/Bqa4e1s06BAwJXo9Ddif9rHWqK3o7Nq1ixMnTsRdxkWnra2NM2fOxF3GAMHdXcysBvgdsNLdvzCzc8Pc3c3MhzNjM1tBajUtsU6ePJnI8yokHkFhMbMxpILyW3f/fdR82Mzq3b0tWs06ErUfABrTPt4QtZ3H3VcBq6LpDytoxcDd6erqory8PO5SRlVXV9d5OzdKS0svmH5yWcNiqUXIr4FP3f2XaYPWAfcAP4+eX05rf8jMXgC+CpxIW127aJw+fZp33nmH+fPnU1NTA8DRo0dxH/x3oaysjAkTJoxmiXnV2dnJyZMn2bx5M8ePHz/XXl9fz9y5c6mqqoqxuvwIWbLcACwHtprZpqjtR6RC8pKZ3Q/sBe6Mhr0CLAF2Ah3AffksuJi0t7fz4YcfnruL2JYtWzLuUq6qquLKK68cdFhtbS2TJ08uWJ256OnpYffu3Rw7dmzQngxtbW1s2rSJSZMm0dTURFlZ8XZ0z1q5u78DWIbBiwcZ34EHc6zrgnH48GEOHz6cdby///3vbNq0adBhNTU1wwrL5MmTaWxszD7iMHV0dPDpp5+e19bb28vevXuH/Fxrayutra00NDRc2GGR+J06dWpYZ2AePHiQHTt25L2Onp6enPYOvvvuu3z9618nfedQMVFYLkCdnZ10dnbGXcYA6dsyxUh9w0QCKSwigRQWkUDaZsnBihUr+Nvf/sarr74adykyChSWYVq4cCFLly4FoLGxkd7eXp555hl+8IMfxFyZFJplOqI8qkUkuLvL66+/zsKFC8+9LysrG9B9o7e3l6eeeoqf/vSno11e0Rk3bhy33nprxuFnz55l48aN7N+/P+M4hebug+7b1pIli4qKiqxdNUpLS2loaKC2tla9lLPo6ekZcviOHTtiDcpQtIE/hNmzZ3PppZcGjXvvvffyrW99q8AVFb++rj+D6ezsTPSPjZYsQ7j//vu5+uqr4y7jgmFmLF++nJKSEtrb22lr+7J/bVdXF5s3b070lXIUljx65JFHeO+999i1a1fcpSTOsmXLmD59Otdccw2Q6pU9c+ZMADZs2MCGDRuC+tDFSWHJ4K677mL58uXD+kxLSwuXXHJJYQoqYnfccQdLliyhoqLiXFt1dTXV1dUALF68mBdffDGu8oJpmyWD2tpaamtr4y6jqJWUlHDbbbdxxx13nBeU/mpra3n66aeprKwcxeqGT2EZRE1NDTNmzIi7jKJWWlrKokWLuO+++ygpyf41u+yyy3j00UdHobKRU1gG8ZWvfIXHH3887jKKWnV19bAP1E6cOJHLL7+8QBXlTmHpp6amhocffjjuMi5KjY2NLFiwIO4yMlJY+qmqquLOO+/MPqIM6Yc//GHcJeSdwtJPaWlp3CUUPTPjqquuiruMvFNY0pgZe/bsibsMSSiFpR8tWXLX3NxctOfZD0VhyaM33niDI0eOZB/xArdy5cqg3cXF5sL7F8Vo7dq1ie0xK7lTWEQCKSwigRSWPDlx4gQnT56MuwwpIIUlT5599llefvnl7CNKRl988QWtra1xl5GRwpIHu3fv5o9//GPcZRS93bt3s379+rjLyEhhSePuI7pKy44dO3Q5pIuAwtLPcFel2traeOCBBwpUTXF68sknh3235uPHj7Nq1aoCVZQfCks/R48e5eabbw4e//jx4+oi08/Bgwcz3rQpk9OnT/P5558XqKL8UFj6cXeOHj0atKG5detWrr322lGo6sK2b98+HnnkkbjLyEphGcSmTZu49957efHFFzP+2r355pvccMMNw/4FlfNt3bqVn/zkJ3GXEURXpMzie9/73qB30Vq7di0HDgy4r6xE7rrrLr773e8OOc7GjRtZvXo1x44dG6WqwmS6ImXWsJhZI7CW1H3uHVjl7k+b2RPAPwF9P70/cvdXos88DtwP9AL/4u6vZZlHYsMiIzN+/Hiee+65jMM/+OADnnvuOdrb20exqjC5hKUeqHf3D81sHPABcDupG66ecvf/6Df+LOB5YD4wFXgTuMLde4eYh8JygSkpKeHSSy9lwYIFLFu2DEhdx3jlypW4Ox0dHYnt8TDisAz4gNnLwH+RuovxYGF5PJrhU9H714An3P29IaapsFygzOy8c4SyXes4CTKFZVgb+GY2A2gB/hw1PWRmW8xstZn13cR9GpDeT701aus/rRVm9r6ZvT+cGqS4uDs9PT3nHsUsOCxmVgP8Dljp7l8AzwCXA7OBNuAXw5mxu69y93nuPm84nxOJS1BYzGwMqaD81t1/D+Duh929193PAs+S2kYBOACk7z5qiNpEilrWsFjqZOpfA5+6+y/T2tPvHfAdYFv0eh1wt5lVmFkT0AxszF/JIvEIuTD4DcByYKuZbYrafgQsM7PZpHYn7wEeAHD3j83sJeAToAd4cKg9YSLFIikHJT8HTgNH464lwCSKo04onlqTVOc/uPugd7BKRFgAzOz9YtjYL5Y6oXhqLZY61TdMJJDCIhIoSWFJ9pk/XyqWOqF4ai2KOhOzzSKSdElasogkWuxhMbNbzWy7me00s8firqc/M9tjZlvNbFNfPzYzm2hmb5jZjuh5QrbpFKCu1WZ2xMy2pbUNWpel/Cr6G28xszkJqPUJMzsQ/V03mdmStGGPR7VuN7NbRrPWIbl7bA+gFNgFzATKgc3ArDhrGqTGPcCkfm3/DjwWvX4M+LcY6roRmANsy1YXsAR4FTDgeuDPCaj1CeBfBxl3VvQ9qACaou9HadzfA3ePfckyH9jp7p+5exfwArA05ppCLAXWRK/XkDq/Z1S5+9tA/1MMM9W1FFjrKRuAS/p1VyqoDLVmshR4wd3PuPtuYCdf9juMVdxhCerOHzMHXjezD8xsRdQ2xd3boteHSJ1FmgSZ6krq33nEp3jEIe6wFIOF7j4HuA140MxuTB/oqXWHxO1STGpdaXI6xSMOcYcl8d353f1A9HwE+AOpVYLDfasx0XNS7mCUqa7E/Z29CE/xiDssfwGazazJzMqBu0l18U8EM6uOrjuAmVUD3yB1KsI64J5otHuApFwRPFNd64DvR3vFrgdOpK2uxaIoT/GIew8DqT01fyW11+PHcdfTr7aZpPbMbAY+7qsPqAPeAnaQuiDHxBhqe57U6ks3qfX6+zPVRWov2H9Hf+OtwLwE1Pq/US1bSAWkPm38H0e1bgdui/t70PfQEXyRQHGvhokUDYVFJJDCIhJIYREJpLCIBFJYRAIpLCKBFBaRQP8Pwyi7K7/X07gAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(armlabel_map[0].permute(1,2,0).detach().cpu().numpy(), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x1440 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(8, 20))\n",
    "ax = fig.add_subplot(1, 2, 1)\n",
    "plt.imshow(armlabel_map[0].permute(1,2,0).detach().cpu().numpy(), cmap='gray')\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "ax = fig.add_subplot(1, 2, 2)\n",
    "plt.imshow(in_image[0].permute(1,2,0).detach().cpu().numpy()+0.3)\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:1: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1e6ceba99c8>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fake_cl = torch.FloatTensor((armlabel_map.cpu().numpy() == 1).astype(np.float)).cuda()\n",
    "plt.imshow(fake_cl[0].permute(1,2,0).detach().cpu().numpy(), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GMM(nn.Module):\n",
    "    def __init__(self, input_nc, output_nc=3):\n",
    "        super(GMM, self).__init__()\n",
    "        self.stn = networks.Net()\n",
    "        nl = nn.InstanceNorm2d\n",
    "        self.conv1 = nn.Sequential(*[nn.Conv2d(input_nc, 64, kernel_size=3, stride=1, padding=1), nl(64), nn.ReLU()])\n",
    "        self.pool1 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "        self.conv2 = nn.Sequential(*[nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1), nl(128), nn.ReLU()])\n",
    "        self.pool2 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "        self.conv3 = nn.Sequential(*[nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1), nl(256), nn.ReLU()])\n",
    "        self.pool3 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "        self.conv4 = nn.Sequential(*[nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU(),\n",
    "                                     nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU()])\n",
    "        self.drop4 = nn.Dropout(0.5)\n",
    "        self.pool4 = nn.MaxPool2d(kernel_size=(2, 2))\n",
    "        self.conv5 = nn.Sequential(*[nn.Conv2d(512, 1024, kernel_size=3, stride=1, padding=1), nl(1024), nn.ReLU(),\n",
    "                                     nn.Conv2d(1024, 1024, kernel_size=3, stride=1, padding=1), nl(1024), nn.ReLU()])\n",
    "        self.drop5 = nn.Dropout(0.5)\n",
    "\n",
    "# ------------------------------------------------ encoder-decoder split --------------------------------------------------------\n",
    "\n",
    "        self.up6 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1), nl(512),\n",
    "              nn.ReLU()])\n",
    "        self.conv6 = nn.Sequential(*[nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU(),\n",
    "                                     nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1), nl(512), nn.ReLU()])\n",
    "        self.up7 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(512, 256, kernel_size=3, stride=1, padding=1), nl(256),\n",
    "              nn.ReLU()])\n",
    "        self.conv7 = nn.Sequential(*[nn.Conv2d(512, 256, kernel_size=3, stride=1, padding=1), nl(256), nn.ReLU()])\n",
    "        self.up8 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(256, 128, kernel_size=3, stride=1, padding=1), nl(128),\n",
    "              nn.ReLU()])\n",
    "        self.conv8 = nn.Sequential(*[nn.Conv2d(256, 128, kernel_size=3, stride=1, padding=1), nl(128), nn.ReLU()])\n",
    "        self.up9 = nn.Sequential(\n",
    "            *[nn.UpsamplingNearest2d(scale_factor=2), nn.Conv2d(128, 64, kernel_size=3, stride=1, padding=1), nl(64),\n",
    "              nn.ReLU()])\n",
    "        self.conv9 = nn.Sequential(*[nn.Conv2d(128, 64, kernel_size=3, stride=1, padding=1), nl(64), nn.ReLU(),\n",
    "                                     nn.Conv2d(\n",
    "                                         64, output_nc, kernel_size=3, stride=1, padding=1)\n",
    "                                     ])\n",
    "\n",
    "    def forward(self, clothes, torso, pose):\n",
    "        affine_transformed = self.stn(clothes, torso)\n",
    "        conv1 = self.conv1(torch.cat([affine_transformed.detach(), torso.detach(), pose.detach()], 1))\n",
    "        pool1 = self.pool1(conv1)\n",
    "        conv2 = self.conv2(pool1)\n",
    "        pool2 = self.pool2(conv2)\n",
    "        conv3 = self.conv3(pool2)\n",
    "        pool3 = self.pool3(conv3)\n",
    "        conv4 = self.conv4(pool3)\n",
    "        drop4 = self.drop4(conv4)\n",
    "        pool4 = self.pool4(drop4)\n",
    "        conv5 = self.conv5(pool4)\n",
    "        drop5 = self.drop5(conv5)\n",
    "        up6 = self.up6(drop5)\n",
    "        conv6 = self.conv6(torch.cat([drop4, up6], 1))\n",
    "        up7 = self.up7(conv6)\n",
    "        conv7 = self.conv7(torch.cat([conv3, up7], 1))\n",
    "        up8 = self.up8(conv7)\n",
    "        conv8 = self.conv8(torch.cat([conv2, up8], 1))\n",
    "        up9 = self.up9(conv8)\n",
    "        conv9 = self.conv9(torch.cat([conv1, up9], 1))\n",
    "        # Encoder has 7 convolution layers\n",
    "        # Decoder has 10 convolution layers\n",
    "        return conv9, affine_transformed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "with torch.no_grad():\n",
    "    G3 = Refine(11, 3)\n",
    "    G3.cuda(opt.gpu_ids[0])\n",
    "    G3.load_state_dict(torch.load('../label2city/mine/G3_epoch99_no_disc.pth')) #186 epochs \n",
    "    G3.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "with torch.no_grad():\n",
    "    gmm = GMM(7,3)\n",
    "    gmm.cuda(opt.gpu_ids[0])\n",
    "    gmm.load_state_dict(torch.load('../label2city/mine/gmm_affine_21.pth'))\n",
    "    gmm.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def morpho(mask, iter, bigger=True):\n",
    "    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))\n",
    "    new = []\n",
    "    for i in range(len(mask)):\n",
    "        tem = mask[i].cpu().detach().numpy().squeeze().reshape(256, 192, 1)*255\n",
    "        tem = tem.astype(np.uint8)\n",
    "        if bigger:\n",
    "            tem = cv2.dilate(tem, kernel, iterations=iter)\n",
    "        else:\n",
    "            tem = cv2.erode(tem, kernel, iterations=iter)\n",
    "        tem = tem.astype(np.float64)\n",
    "        tem = tem.reshape(1, 256, 192)\n",
    "        new.append(tem.astype(np.float64)/255.0)\n",
    "    new = np.stack(new)\n",
    "    new = torch.FloatTensor(new).cuda()\n",
    "    return new\n",
    "\n",
    "def encode(label_map, size):\n",
    "    label_nc = 14\n",
    "    oneHot_size = (size[0], label_nc, size[2], size[3])\n",
    "    input_label = torch.cuda.FloatTensor(torch.Size(oneHot_size)).zero_()\n",
    "    input_label = input_label.scatter_(1, label_map.data.long().cuda(), 1.0)\n",
    "    return input_label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def ger_average_color(mask, arms):\n",
    "    color = torch.zeros(arms.shape).cuda()\n",
    "    for i in range(arms.shape[0]):\n",
    "        count = len(torch.nonzero(mask[i, :, :, :]))\n",
    "        if count < 10:\n",
    "            color[i, 0, :, :] = 0\n",
    "            color[i, 1, :, :] = 0\n",
    "            color[i, 2, :, :] = 0\n",
    "\n",
    "        else:\n",
    "            color[i, 0, :, :] = arms[i, 0, :, :].sum() / count\n",
    "            color[i, 1, :, :] = arms[i, 1, :, :].sum() / count\n",
    "            color[i, 2, :, :] = arms[i, 2, :, :].sum() / count\n",
    "    return color\n",
    "\n",
    "def morpho(mask, iter, bigger=True):\n",
    "    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))\n",
    "    new = []\n",
    "    for i in range(len(mask)):\n",
    "        tem = mask[i].cpu().detach().numpy().squeeze().reshape(256, 192, 1)*255\n",
    "        tem = tem.astype(np.uint8)\n",
    "        if bigger:\n",
    "            tem = cv2.dilate(tem, kernel, iterations=iter)\n",
    "        else:\n",
    "            tem = cv2.erode(tem, kernel, iterations=iter)\n",
    "        tem = tem.astype(np.float64)\n",
    "        tem = tem.reshape(1, 256, 192)\n",
    "        new.append(tem.astype(np.float64)/255.0)\n",
    "    new = np.stack(new)\n",
    "    new = torch.FloatTensor(new).cuda()\n",
    "    return new\n",
    "\n",
    "def encode(label_map, size):\n",
    "    label_nc = 14\n",
    "    oneHot_size = (size[0], label_nc, size[2], size[3])\n",
    "    input_label = torch.cuda.FloatTensor(torch.Size(oneHot_size)).zero_()\n",
    "    input_label = input_label.scatter_(1, label_map.data.long().cuda(), 1.0)\n",
    "    return input_label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:1: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:2: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  \n",
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:6: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  \n",
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\ipykernel_launcher.py:8: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "arm1_mask = torch.FloatTensor((in_label.cpu().numpy() == 11).astype(np.float)).cuda()\n",
    "arm2_mask = torch.FloatTensor((in_label.cpu().numpy() == 13).astype(np.float)).cuda()\n",
    "skin_color = ger_average_color((arm1_mask + arm2_mask - arm2_mask * arm1_mask),\n",
    "            (arm1_mask + arm2_mask - arm2_mask * arm1_mask) * in_image)\n",
    "new_arm1_mask = torch.FloatTensor(\n",
    "            (armlabel_map.cpu().numpy() == 11).astype(np.float)).cuda()\n",
    "new_arm2_mask = torch.FloatTensor(\n",
    "            (armlabel_map.cpu().numpy() == 13).astype(np.float)).cuda()\n",
    "\n",
    "\n",
    "arm1_occ = in_mask_clothes * new_arm1_mask\n",
    "arm2_occ = in_mask_clothes * new_arm2_mask\n",
    "bigger_arm1_occ = morpho(arm1_occ, 10)\n",
    "bigger_arm2_occ = morpho(arm2_occ, 10)\n",
    "\n",
    "occlude = (1 - bigger_arm1_occ * (arm2_mask + arm1_mask+in_mask_clothes)) * \\\n",
    "            (1 - bigger_arm2_occ * (arm2_mask + arm1_mask+in_mask_clothes))\n",
    "img_hole_hand = in_img_fore * \\\n",
    "            (1 - in_mask_clothes) * occlude * (1 - fake_cl)\n",
    "dis_label = encode(armlabel_map, armlabel_map.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\torch\\nn\\functional.py:4066: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.\n",
      "  \"Default grid_sample and affine_grid behavior has changed \"\n",
      "C:\\Users\\Tasin\\anaconda3\\envs\\improve\\lib\\site-packages\\torch\\nn\\functional.py:4004: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.\n",
      "  \"Default grid_sample and affine_grid behavior has changed \"\n"
     ]
    }
   ],
   "source": [
    "def grid_sample(input, grid, canvas=None):\n",
    "    output = F.grid_sample(input, grid)\n",
    "    if canvas is None:\n",
    "        return output\n",
    "    else:\n",
    "        input_mask = Variable(input.data.new(input.size()).fill_(1))\n",
    "        output_mask = F.grid_sample(input_mask, grid)\n",
    "        padded_output = output * output_mask + canvas * (1 - output_mask)\n",
    "        return padded_output\n",
    "\n",
    "tanh = torch.nn.Tanh()\n",
    "'''fake_c, warped = gmm(clothes, fake_cl, pre_clothes_mask)\n",
    "composition_mask = fake_c[:, 3, :, :]\n",
    "composition_mask= sigmoid(composition_mask)\n",
    "\n",
    "mask = fake_c[:, 3, :, :]\n",
    "mask = sigmoid(mask)*fake_cl\n",
    "fake_c = tanh(fake_c[:, 0:3, :, :])\n",
    "fake_c = fake_c*(1-mask)+mask*warped'''\n",
    "\n",
    "fake_c, warped = gmm(clothes, fake_cl, in_skeleton)\n",
    "fake_c=tanh(fake_c)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(8, 8))\n",
    "ax = fig.add_subplot(2, 3, 1)\n",
    "plt.imshow(fake_c[0].permute(1,2,0).detach().cpu().numpy()+0.3)\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "ax = fig.add_subplot(2, 3, 2)\n",
    "plt.imshow(warped[0].permute(1,2,0).detach().cpu().numpy()+0.3)\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "#ax = fig.add_subplot(2, 3, 3)\n",
    "#plt.imshow(warped_mask[0].permute(1,2,0).detach().cpu().numpy(), cmap='gray')\n",
    "#ax.xaxis.set_visible(False)\n",
    "#ax.yaxis.set_visible(False)\n",
    "ax = fig.add_subplot(2, 3, 4)\n",
    "plt.imshow(fake_cl[0].permute(1,2,0).detach().cpu().numpy(), cmap='gray')\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "G3_in = torch.cat([img_hole_hand, armlabel_map, fake_c, skin_color, gen_noise(shape)], 1)\n",
    "fake_image = G3(G3_in.detach())\n",
    "fake_image = tanh(fake_image)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1e6e130ca08>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(img_hole_hand[0].permute(1,2,0).detach().cpu().numpy()+0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1e6e19a83c8>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tensor = (fake_image[0].clone() + 1) * 0.5 * 255\n",
    "tensor = tensor.cpu().clamp(0, 255)\n",
    "array = tensor.detach().numpy().astype('uint8')\n",
    "array = array.swapaxes(0, 1).swapaxes(1, 2)\n",
    "plt.imshow(array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x20a542a9f88>"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(armlabel_map[0].permute(1,2,0).detach().cpu().numpy(), cmap = 'gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_pool=[G1_in,G3_in,torch.cat([in_mask_clothes,clothes],1)]        ##fake_cl_dis to replace\n",
    "real_pool=[masked_label,in_image,in_image*in_mask_clothes]\n",
    "fake_pool=[arm_label,fake_image,fake_c]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ground Truth Images\n",
    "\n",
    "We use this to calculate the loss against the generated ones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(8, 8))\n",
    "ax = fig.add_subplot(2, 3, 1)\n",
    "plt.imshow(in_mask_clothes[0].permute(1,2,0).detach().cpu().numpy(), cmap='gray')\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "ax = fig.add_subplot(2, 3, 2)\n",
    "plt.imshow(in_image[0].permute(1,2,0).detach().cpu().numpy()+0.3)\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "ax = fig.add_subplot(2, 3, 3)\n",
    "plt.imshow((in_image*in_mask_clothes)[0].permute(1,2,0).detach().cpu().numpy()+0.3)\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fake Images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(8, 8))\n",
    "ax = fig.add_subplot(2, 3, 1)\n",
    "plt.imshow(fake_c[0].permute(1,2,0).detach().cpu().numpy()+1)\n",
    "plt.title(\"Generated by STN\")\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "ax = fig.add_subplot(2, 3, 2)\n",
    "plt.imshow(fake_cl[0].permute(1,2,0).detach().cpu().numpy())\n",
    "plt.title(\"Generated by G2\")\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "ax = fig.add_subplot(2, 3, 3)\n",
    "plt.imshow((fake_image*in_mask_clothes)[0].permute(1,2,0).detach().cpu().numpy()+1)\n",
    "plt.title(\"Used to compare with STN\")\n",
    "\n",
    "ax.xaxis.set_visible(False)\n",
    "ax.yaxis.set_visible(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How to calculate loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ImagePool():\n",
    "    def __init__(self, pool_size):\n",
    "        self.pool_size = pool_size\n",
    "        if self.pool_size > 0:\n",
    "            self.num_imgs = 0\n",
    "            self.images = []\n",
    "\n",
    "    def query(self, images):\n",
    "        if self.pool_size == 0:\n",
    "            return images\n",
    "        return_images = []\n",
    "        for image in images.data:\n",
    "            image = torch.unsqueeze(image, 0)\n",
    "            if self.num_imgs < self.pool_size:\n",
    "                self.num_imgs = self.num_imgs + 1\n",
    "                self.images.append(image)\n",
    "                return_images.append(image)\n",
    "            else:\n",
    "                p = random.uniform(0, 1)\n",
    "                if p > 0.5:\n",
    "                    random_id = random.randint(0, self.pool_size-1)\n",
    "                    tmp = self.images[random_id].clone()\n",
    "                    self.images[random_id] = image\n",
    "                    return_images.append(tmp)\n",
    "                else:\n",
    "                    return_images.append(image)\n",
    "        return_images = Variable(torch.cat(return_images, 0))\n",
    "        return return_images\n",
    "\n",
    "def discriminate(netD ,input_label, test_image, use_pool=False):\n",
    "    input_concat = torch.cat((input_label, test_image.detach()), dim=1)\n",
    "    fake_pool = ImagePool(opt.pool_size)\n",
    "    fake_query = fake_pool.query(input_concat)\n",
    "    return netD.forward(fake_query)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from models import networks\n",
    "D3 = networks.define_D(7, opt.ndf, opt.n_layers_D, opt.norm, opt.no_lsgan,\n",
    "                                 opt.num_D, not opt.no_ganFeat_loss, gpu_ids=opt.gpu_ids)\n",
    "\n",
    "fake_pool_for_stn = discriminate(D3, torch.cat([in_mask_clothes,in_color],1).detach(), fake_c, use_pool=True)\n",
    "real_pool_for_stn = discriminate(D3, torch.cat([in_mask_clothes,in_color],1).detach(), in_image*in_mask_clothes, use_pool=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss_D_fake=0\n",
    "loss_D_real=0\n",
    "loss_G_GAN=0\n",
    "loss_G_VGG = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "criterionGAN = networks.GANLoss(use_lsgan=not opt.no_lsgan, tensor=torch.cuda.FloatTensor) \n",
    "loss_D_fake += criterionGAN(fake_pool_for_stn, False)    \n",
    "loss_D_real += criterionGAN(real_pool_for_stn, True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_data = torch.cat([in_mask_clothes,in_color],1)\n",
    "pred_fake = D3.forward(torch.cat((input_data.detach(), fake_c), dim=1))\n",
    "loss_G_GAN += criterionGAN(pred_fake, True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "criterionVGG = networks.VGGLoss(opt.gpu_ids)\n",
    "comp_fake_c=fake_c.detach()*(1-composition_mask).unsqueeze(1)+(composition_mask.unsqueeze(1))*warped.detach()\n",
    "loss_G_VGG += criterionVGG.warp(warped, in_image*in_mask_clothes)+ criterionVGG.warp(comp_fake_c, in_image*in_mask_clothes) * 10\n",
    "loss_G_VGG += criterionVGG.warp(fake_c, in_image*in_mask_clothes) *20\n",
    "\n",
    "criterionFeat = torch.nn.L1Loss()\n",
    "\n",
    "L1_loss = criterionFeat(warped_mask,in_mask_clothes)+criterionFeat(warped, in_image*in_mask_clothes)\n",
    "L1_loss+= criterionFeat(fake_c, in_image*in_mask_clothes)*0.2\n",
    "L1_loss+= criterionFeat(comp_fake_c, in_image*in_mask_clothes)*10\n",
    "L1_loss+= criterionFeat(composition_mask,in_mask_clothes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.imshow(composition_mask[0].detach().cpu().numpy()+1)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "improve",
   "language": "python",
   "name": "improve"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}